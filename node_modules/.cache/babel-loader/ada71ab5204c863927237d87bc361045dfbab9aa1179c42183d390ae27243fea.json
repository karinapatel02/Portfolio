{"ast":null,"code":"import _classCallCheck from \"/Users/karina/KarinaPortfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/karina/KarinaPortfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/* eslint-env browser */\n\n/* global module */\nexport function addDebugMetadata(instance, stackIndex) {\n  // @ts-expect-error todo: stacktrace does not exist on error (non standard browser?)\n  var _Error = new Error(\"stacktrace source\"),\n    stack = _Error.stack,\n    stacktrace = _Error.stacktrace,\n    message = _Error.message;\n  instance.debug = {\n    stackInfo: {\n      stack: stack,\n      stacktrace: stacktrace,\n      message: message\n    },\n    stackIndex: stackIndex\n  };\n} // DEVTOOLS SETUP\n\nexport var setupDevtoolsExtension = function setupDevtoolsExtension() {\n  var atomicMap = {};\n  var extensionsMap = new Map();\n  var stylesMap = new Map();\n  var getStyles = function getStyles(className) {\n    var styles = {};\n    if (typeof className !== \"string\") {\n      return styles;\n    }\n    if (stylesMap.has(className)) {\n      styles.styles = stylesMap.get(className);\n      var classList = className.split(\" \");\n      if (classList.length) {\n        var classes = {};\n        classList.forEach(function (singleClassName) {\n          classes[singleClassName] = atomicMap[singleClassName];\n        });\n        styles.classes = classes;\n      }\n      if (extensionsMap.has(className)) {\n        var extension = extensionsMap.get(className);\n        styles.extends = extension;\n      }\n      return styles;\n    }\n  };\n  window.__STYLETRON_DEVTOOLS__ = {\n    atomicMap: atomicMap,\n    extensionsMap: extensionsMap,\n    stylesMap: stylesMap,\n    getStyles: getStyles\n  };\n}; // todo: export debug engine interface\n\nexport var BrowserDebugEngine = /*#__PURE__*/function () {\n  function BrowserDebugEngine(worker) {\n    _classCallCheck(this, BrowserDebugEngine);\n    if (!worker) {\n      var workerBlob = new Blob([\"importScripts(\\\"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/worker.js\\\")\"], {\n        type: \"application/javascript\"\n      });\n      worker = new Worker(URL.createObjectURL(workerBlob));\n      worker.postMessage({\n        id: \"init_wasm\",\n        url: \"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/mappings.wasm\"\n      });\n      worker.postMessage({\n        id: \"set_render_interval\",\n        interval: 120\n      });\n      if (module.hot) {\n        module.hot.addStatusHandler(function (status) {\n          if (status === \"dispose\") {\n            worker.postMessage({\n              id: \"invalidate\"\n            });\n          }\n        });\n      }\n    }\n    this.worker = worker;\n    this.counter = 0;\n    this.worker.onmessage = function (msg) {\n      var _msg$data = msg.data,\n        id = _msg$data.id,\n        css = _msg$data.css;\n      if (id === \"render_css\" && css) {\n        var style = document.createElement(\"style\");\n        style.appendChild(document.createTextNode(css));\n        document.head.appendChild(style);\n      }\n    };\n  }\n  _createClass(BrowserDebugEngine, [{\n    key: \"debug\",\n    value: function debug(_ref) {\n      var stackIndex = _ref.stackIndex,\n        stackInfo = _ref.stackInfo;\n      var className = \"__debug-\".concat(this.counter++);\n      this.worker.postMessage({\n        id: \"add_mapped_class\",\n        className: className,\n        stackInfo: stackInfo,\n        stackIndex: stackIndex\n      });\n      return className;\n    }\n  }]);\n  return BrowserDebugEngine;\n}(); // todo: export debug engine interface\n\nexport var NoopDebugEngine = /*#__PURE__*/function () {\n  function NoopDebugEngine() {\n    _classCallCheck(this, NoopDebugEngine);\n  }\n  _createClass(NoopDebugEngine, [{\n    key: \"debug\",\n    value: function debug() {\n      return;\n    }\n  }]);\n  return NoopDebugEngine;\n}();\nexport var DebugEngine = true ? BrowserDebugEngine : NoopDebugEngine;","map":{"version":3,"mappings":"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","names":["addDebugMetadata","instance","stackIndex","Error","stack","stacktrace","message","debug","stackInfo","setupDevtoolsExtension","atomicMap","extensionsMap","Map","stylesMap","getStyles","className","styles","has","get","classList","split","length","classes","forEach","singleClassName","extension","extends","window","__STYLETRON_DEVTOOLS__","BrowserDebugEngine","constructor","worker","workerBlob","Blob","type","Worker","URL","createObjectURL","postMessage","id","url","interval","module","hot","addStatusHandler","status","counter","onmessage","msg","data","css","style","document","createElement","appendChild","createTextNode","head","NoopDebugEngine","DebugEngine"],"sources":["/Users/karina/KarinaPortfolio/node_modules/styletron-react/dist-browser-esm/src/dev-tool.ts"],"sourcesContent":["/* eslint-env browser */\n/* global module */\n\nexport function addDebugMetadata(instance, stackIndex) {\n  // @ts-expect-error todo: stacktrace does not exist on error (non standard browser?)\n  const {stack, stacktrace, message} = new Error(\"stacktrace source\");\n  instance.debug = {\n    stackInfo: {stack, stacktrace, message},\n    stackIndex: stackIndex,\n  };\n}\n\n// DEVTOOLS SETUP\ntype StyletronStyles = {\n  classes?: any;\n  styles?: any;\n  extends?: any;\n};\n\nexport const setupDevtoolsExtension = () => {\n  const atomicMap = {};\n  const extensionsMap = new Map();\n  const stylesMap = new Map();\n  const getStyles: (className: string) => StyletronStyles = className => {\n    const styles: StyletronStyles = {};\n    if (typeof className !== \"string\") {\n      return styles;\n    }\n    if (stylesMap.has(className)) {\n      styles.styles = stylesMap.get(className);\n      const classList = className.split(\" \");\n      if (classList.length) {\n        const classes = {};\n        classList.forEach(singleClassName => {\n          classes[singleClassName] = atomicMap[singleClassName];\n        });\n        styles.classes = classes;\n      }\n      if (extensionsMap.has(className)) {\n        const extension = extensionsMap.get(className);\n        styles.extends = extension;\n      }\n      return styles;\n    }\n  };\n  window.__STYLETRON_DEVTOOLS__ = {\n    atomicMap,\n    extensionsMap,\n    stylesMap,\n    getStyles,\n  };\n};\n\n// todo: export debug engine interface\nexport class BrowserDebugEngine {\n  private worker: any;\n  private counter: number;\n  constructor(worker?) {\n    if (!worker) {\n      const workerBlob = new Blob(\n        [\n          `importScripts(\"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/worker.js\")`,\n        ],\n        {type: \"application/javascript\"},\n      );\n      worker = new Worker(URL.createObjectURL(workerBlob));\n      worker.postMessage({\n        id: \"init_wasm\",\n        url: \"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/mappings.wasm\",\n      });\n      worker.postMessage({\n        id: \"set_render_interval\",\n        interval: 120,\n      });\n      if (module.hot) {\n        module.hot.addStatusHandler(status => {\n          if (status === \"dispose\") {\n            worker.postMessage({id: \"invalidate\"});\n          }\n        });\n      }\n    }\n    this.worker = worker;\n    this.counter = 0;\n    this.worker.onmessage = msg => {\n      const {id, css} = msg.data;\n      if (id === \"render_css\" && css) {\n        const style = document.createElement(\"style\");\n        style.appendChild(document.createTextNode(css));\n        document.head.appendChild(style);\n      }\n    };\n  }\n\n  debug({stackIndex, stackInfo}) {\n    const className = `__debug-${this.counter++}`;\n    this.worker.postMessage({\n      id: \"add_mapped_class\",\n      className,\n      stackInfo,\n      stackIndex,\n    });\n    return className;\n  }\n}\n\n// todo: export debug engine interface\nexport class NoopDebugEngine {\n  debug(): undefined {\n    return;\n  }\n}\n\ndeclare var __BROWSER__: boolean;\nexport const DebugEngine = __BROWSER__ ? BrowserDebugEngine : NoopDebugEngine;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}