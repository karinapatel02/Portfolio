{"ast":null,"code":"// adapted from https://github.com/dutchenkoOleg/sort-css-media-queries\nvar minMaxWidth = /(!?\\(\\s*min(-device-)?-width).+\\(\\s*max(-device)?-width/i;\nvar minWidth = /\\(\\s*min(-device)?-width/i;\nvar maxMinWidth = /(!?\\(\\s*max(-device)?-width).+\\(\\s*min(-device)?-width/i;\nvar maxWidth = /\\(\\s*max(-device)?-width/i;\nvar isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth);\nvar isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth);\nvar minMaxHeight = /(!?\\(\\s*min(-device)?-height).+\\(\\s*max(-device)?-height/i;\nvar minHeight = /\\(\\s*min(-device)?-height/i;\nvar maxMinHeight = /(!?\\(\\s*max(-device)?-height).+\\(\\s*min(-device)?-height/i;\nvar maxHeight = /\\(\\s*max(-device)?-height/i;\nvar isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight);\nvar isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight);\nvar isPrint = /print/i;\nvar isPrintOnly = /^print$/i;\nvar maxValue = Number.MAX_VALUE;\nfunction _getQueryLength(length) {\n  var matches = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length);\n  if (matches === null) {\n    return maxValue;\n  }\n  var number = matches[1];\n  var unit = matches[2];\n  switch (unit) {\n    case \"ch\":\n      number = parseFloat(number) * 8.8984375;\n      break;\n    case \"em\":\n    case \"rem\":\n      number = parseFloat(number) * 16;\n      break;\n    case \"ex\":\n      number = parseFloat(number) * 8.296875;\n      break;\n    case \"px\":\n      number = parseFloat(number);\n      break;\n  }\n  return +number;\n}\nfunction _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {\n  return function (query) {\n    if (doubleTestTrue.test(query)) {\n      return true;\n    } else if (doubleTestFalse.test(query)) {\n      return false;\n    }\n    return singleTest.test(query);\n  };\n}\nfunction _testIsPrint(a, b) {\n  var isPrintA = isPrint.test(a);\n  var isPrintOnlyA = isPrintOnly.test(a);\n  var isPrintB = isPrint.test(b);\n  var isPrintOnlyB = isPrintOnly.test(b);\n  if (isPrintA && isPrintB) {\n    if (!isPrintOnlyA && isPrintOnlyB) {\n      return 1;\n    }\n    if (isPrintOnlyA && !isPrintOnlyB) {\n      return -1;\n    }\n    return a.localeCompare(b);\n  }\n  if (isPrintA) {\n    return 1;\n  }\n  if (isPrintB) {\n    return -1;\n  }\n  return null;\n}\nexport default function sortCSSmq(a, b) {\n  if (a === \"\") {\n    return -1;\n  }\n  if (b === \"\") {\n    return 1;\n  }\n  var testIsPrint = _testIsPrint(a, b);\n  if (testIsPrint !== null) {\n    return testIsPrint;\n  }\n  var minA = isMinWidth(a) || isMinHeight(a);\n  var maxA = isMaxWidth(a) || isMaxHeight(a);\n  var minB = isMinWidth(b) || isMinHeight(b);\n  var maxB = isMaxWidth(b) || isMaxHeight(b);\n  if (minA && maxB) {\n    return -1;\n  }\n  if (maxA && minB) {\n    return 1;\n  }\n  var lengthA = _getQueryLength(a);\n  var lengthB = _getQueryLength(b);\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b);\n  } else if (lengthA === maxValue) {\n    return 1;\n  } else if (lengthB === maxValue) {\n    return -1;\n  }\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1;\n    }\n    return 1;\n  }\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1;\n    }\n    return -1;\n  }\n  return a.localeCompare(b);\n}","map":{"version":3,"mappings":"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","names":["minMaxWidth","minWidth","maxMinWidth","maxWidth","isMinWidth","_testQuery","isMaxWidth","minMaxHeight","minHeight","maxMinHeight","maxHeight","isMinHeight","isMaxHeight","isPrint","isPrintOnly","maxValue","Number","MAX_VALUE","_getQueryLength","length","matches","exec","number","unit","parseFloat","doubleTestTrue","doubleTestFalse","singleTest","query","test","_testIsPrint","a","b","isPrintA","isPrintOnlyA","isPrintB","isPrintOnlyB","localeCompare","sortCSSmq","testIsPrint","minA","maxA","minB","maxB","lengthA","lengthB"],"sources":["/Users/karina/KarinaPortfolio/node_modules/styletron-engine-atomic/dist-browser-esm/src/sort-css-media-queries.ts"],"sourcesContent":["// adapted from https://github.com/dutchenkoOleg/sort-css-media-queries\n\nconst minMaxWidth = /(!?\\(\\s*min(-device-)?-width).+\\(\\s*max(-device)?-width/i;\nconst minWidth = /\\(\\s*min(-device)?-width/i;\nconst maxMinWidth = /(!?\\(\\s*max(-device)?-width).+\\(\\s*min(-device)?-width/i;\nconst maxWidth = /\\(\\s*max(-device)?-width/i;\n\nconst isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth);\nconst isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth);\n\nconst minMaxHeight =\n  /(!?\\(\\s*min(-device)?-height).+\\(\\s*max(-device)?-height/i;\nconst minHeight = /\\(\\s*min(-device)?-height/i;\nconst maxMinHeight =\n  /(!?\\(\\s*max(-device)?-height).+\\(\\s*min(-device)?-height/i;\nconst maxHeight = /\\(\\s*max(-device)?-height/i;\n\nconst isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight);\nconst isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight);\n\nconst isPrint = /print/i;\nconst isPrintOnly = /^print$/i;\nconst maxValue = Number.MAX_VALUE;\n\nfunction _getQueryLength(length: string) {\n  const matches = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length);\n  if (matches === null) {\n    return maxValue;\n  }\n  let number: number | string = matches[1];\n  const unit = matches[2];\n  switch (unit) {\n    case \"ch\":\n      number = parseFloat(number) * 8.8984375;\n      break;\n    case \"em\":\n    case \"rem\":\n      number = parseFloat(number) * 16;\n      break;\n    case \"ex\":\n      number = parseFloat(number) * 8.296875;\n      break;\n    case \"px\":\n      number = parseFloat(number);\n      break;\n  }\n  return +number;\n}\n\nfunction _testQuery(\n  doubleTestTrue: RegExp,\n  doubleTestFalse: RegExp,\n  singleTest: RegExp,\n) {\n  return function (query: string) {\n    if (doubleTestTrue.test(query)) {\n      return true;\n    } else if (doubleTestFalse.test(query)) {\n      return false;\n    }\n    return singleTest.test(query);\n  };\n}\n\nfunction _testIsPrint(a: string, b: string) {\n  const isPrintA = isPrint.test(a);\n  const isPrintOnlyA = isPrintOnly.test(a);\n  const isPrintB = isPrint.test(b);\n  const isPrintOnlyB = isPrintOnly.test(b);\n\n  if (isPrintA && isPrintB) {\n    if (!isPrintOnlyA && isPrintOnlyB) {\n      return 1;\n    }\n    if (isPrintOnlyA && !isPrintOnlyB) {\n      return -1;\n    }\n    return a.localeCompare(b);\n  }\n  if (isPrintA) {\n    return 1;\n  }\n  if (isPrintB) {\n    return -1;\n  }\n  return null;\n}\n\nexport default function sortCSSmq(a: string, b: string) {\n  if (a === \"\") {\n    return -1;\n  }\n  if (b === \"\") {\n    return 1;\n  }\n  const testIsPrint = _testIsPrint(a, b);\n  if (testIsPrint !== null) {\n    return testIsPrint;\n  }\n\n  const minA = isMinWidth(a) || isMinHeight(a);\n  const maxA = isMaxWidth(a) || isMaxHeight(a);\n  const minB = isMinWidth(b) || isMinHeight(b);\n  const maxB = isMaxWidth(b) || isMaxHeight(b);\n\n  if (minA && maxB) {\n    return -1;\n  }\n  if (maxA && minB) {\n    return 1;\n  }\n\n  const lengthA = _getQueryLength(a);\n  const lengthB = _getQueryLength(b);\n\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b);\n  } else if (lengthA === maxValue) {\n    return 1;\n  } else if (lengthB === maxValue) {\n    return -1;\n  }\n\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1;\n    }\n    return 1;\n  }\n\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1;\n    }\n    return -1;\n  }\n\n  return a.localeCompare(b);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}